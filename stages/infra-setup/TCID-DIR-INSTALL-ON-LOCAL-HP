#!/bin/bash

pod() {

## Cloning oep-e2e-rancher repo
echo -e "\n************************ Deploying Director On-Prem ***********************************\n"
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port 'cd oep-e2e-rancher && bash stages/infra-setup/TCID-DIR-INSTALL-ON-LOCAL-HP node '"'$GITHUB_USERNAME'"' '"'$GITHUB_PASSWORD'"' '"'$RELEASE_USERNAME'"' '"'$RELEASE_PASSWORD'"' '"'$RELEASE'"' '"'$CI_JOB_ID'"' '"'$GITHUB_TOKEN'"' '"'$CI_COMMIT_REF_NAME'"' '"'$WAIT'"''
}

node() {

GITHUB_USERNAME=$1
GITHUB_PASSWORD=$2
RELEASE_USERNAME=$3
RELEASE_PASSWORD=$4
RELEASE=$5
CI_JOB_ID=$6
GITHUB_TOKEN=$7
CI_COMMIT_REF_NAME=$8
WAIT=$9

job_id=$(echo $CI_JOB_ID)
gittoken=$(echo "$GITHUB_TOKEN")
current_time=$(date)
branch_name=$CI_COMMIT_REF_NAME
test_name="TCID-DIR-INSTALL-ON-LOCAL-HP"
stage="INFRA-SETUP"
test_desc="Install DOP using helm with SSD underneath"

#####################################
##          Prerequisites          ##
#####################################

echo -e "[ Running Prerequisites ]-------------------------------------\n";

DOP_URL=http://$(kubectl get nodes -o wide --no-headers | awk {'print $6'} | tail -n 1)
echo -e "\n DOP URL: $DOP_URL\n"

#####################################
##           Deploy DOP            ##
#####################################

##Cluster name
cluster=cluster-1
echo -e "\nCLUSTER_NAME: $cluster\n"

echo -e "\n[ Print DOP release version ]-------------------------------------\n"
echo -e "Release Version: $RELEASE\n"

# Create secret having maya-init repo access
kubectl create secret docker-registry directoronprem-registry-secret --docker-server=registry.mayadata.io --docker-username=$RELEASE_USERNAME --docker-password=$RELEASE_PASSWORD

# Create clusterrolebinding
kubectl create clusterrolebinding kube-admin --clusterrole cluster-admin --serviceaccount=kube-system:default

helm repo update

# Add kubera in local repository
helm repo add kubera https://charts.mayadata.io/

# Apply helm chart
helm install --name kubera kubera/kubera-charts --set server.url=$DOP_URL --set server.release=$RELEASE --set server.maxMemberCountInOneProject=100 --set nginx-ingress.enabled=false

# Pass these values as well if need to run ingress as deployment:  --set nginx-ingress.controller.kind=Deployment --set nginx-ingress.controller.service.enabled=true

# Get the changed values from chart
helm get values kubera > values.yaml

echo -e "Changed values in values.yaml\n"
cat values.yaml

# Dump Kubera On-Prem and OpenEBS pods
echo -e "\n[ Dumping Director On-Prem components ]\n"
kubectl get pod

# Wait for the components to show up
echo -e "\n[ Waiting $WAIT secs for the DOP components to show up] ----------------\n"
sleep $WAIT

# Dump Kubera On-Prem and OpenEBS pods
echo -e "\n[ Dumping Director On-Prem components ]\n"
kubectl get pod

echo -e "\n************************ Installing litmus pre-requisites *****************************\n"

# Cloning oep-e2e repository which contains all the test scripts
git clone https://github.com/mayadata-io/oep-e2e.git

# Setup litmus on the cluster
kubectl apply -f oep-e2e/litmus/prerequisite/rbac.yaml
kubectl apply -f oep-e2e/litmus/prerequisite/crds.yaml
kubectl apply -f oep-e2e/litmus/prerequisite/docker-secret.yml

# Create a configmap from URL
kubectl create configmap config --from-literal=url=$DOP_URL -n litmus

echo -e "\n************************ Running basic-sanity checks **********************************\n"

bash oep-e2e/scripts/director-health-check.sh

# If any of the above check fails, then fail this job
if [ $(cat result.txt | grep -ic fail) != 0 ];then
  testResult="Fail"
  echo -e "\nTest Result: $testResult\n"
  if [[ $branch_name == "oep-release" ]]; then
    python3 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "rancher"
  fi
  exit 1
else
  testResult="Pass"
  echo -e "\nTest Result: $testResult\n"
  if [[ $branch_name == "oep-release" ]]; then
    python3 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "rancher"
  fi
fi
}

if [ "$1" == "node" ];then
  node $2 $3 $4 $5 $6 $7 $8 $9 ${10}
else
  pod
fi
